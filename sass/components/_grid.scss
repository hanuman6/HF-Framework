@charset "utf-8";
@import "utility";    //mixin

//============================================================
//    グリッドシステム
//============================================================

// 参考: http://qiita.com/sawadays0118/items/8dccaf00a7452ee41295

/* #! scss */
// Sass 3.2.1で確認

// 力技ゼロパディング
// $num  : <numbers>
//       : - [note] 単位ありでも戻り値は単位なしです
// $digit: <numbers>
//
// Usage:
//
// zeropadding(10, 3)
//  ↓
// 010

@function zeropadding(
    $num,
    $digit: 2
) {
    $max-nums: 1; // will be '1, 10, 100, 1000...'
    @for $i from 1 to $digit {
        $max-nums: append($max-nums, nth($max-nums, $i) * 10);
    }

    $padding: '';
    @for $i from 1 to $digit {
        @if $num < nth($max-nums, $i + 1) {
            $padding: $padding + "0";
        }
    }

    @return unquote($padding + $num);
}



// Sample
p {
    line-height: 1;
    margin: 0;
    padding: 0;
    font-size: 12px;
}

@for $i from 1 through 100 {
    .s#{zeropadding($i, 3)}:before {
        content: quote(zeropadding($i, 3));
        display: block;
    }
}

/* #! scss */

// forked from kosei27's "Sass(Scss): 数値から単位を取り除く@function" http://jsdo.it/kosei27/cPPP
// 改善点:
// - 新しいユニットが増えたら随時追加、する必要がなくなった
// - 数値以外を渡した場合に@warnの警告を出すようにした

// nounit()
// 数値から単位を取り除く関数
//
// - unitless()が既にSassで別の用途で使用されているので、
//   関数名は nounit() とした
// - 数値以外を渡した場合は@warnの警告が出ます
//    あと、関数に渡した値をそのまま返します
// - 次のIssueの対応策としても少し有効かも
//   https://github.com/nex3/sass/issues/83
//   https://github.com/nex3/sass/issues/83#issuecomment-1150383
//   - (5px / 1px)で数値のみを取得できるとあるが非常にわかりづらい
//     なので、この関数を使う方が良い
//     [Poor]   5px / 1px   // -> 5
//     [Better] nounit(5px) // -> 5
// - 小数はSass側の処理によって小数点第5位までしか出ない。
//   それ以上出したい場合は下記参照。
//   http://stackoverflow.com/questions/7672473/sass-and-rounding-down-numbers-can-this-be-configured
//
// Units:
// - http://www.w3.org/TR/css3-values/#percentages
// - http://www.w3.org/TR/css3-values/#lengths
// - http://www.w3.org/TR/css3-values/#other-units
//
@function nounit($value) {
    @if (type-of($value) == number) {
        $_divisor: ($value * 0) + 1;
        @return $value / $_divisor;
    } @else {
        @warn "#{$value} is not a number.";
        @return $value;
    }
}




.sample {
    // margin: 12px * 60px; // -> 720px*px, ERROR

    /* $var1: 12px; $var2: 60px; */
    $var1: 12px;
    $var2: 60px;
    _/* $var1 * nounit($var2) */: $var1 * nounit($var2); // -> 720px

    _/* 10px * 2 */: 10px * 2; // -> 20px
    _/* 10 * 2px */: 10 * 2px; // -> 20px

    _/* (10 / 2) */: (10 / 2); // -> 5
    _/* (10px / 2) */: (10px / 2); // -> 5px
    /* 割られる数が単位なしで、割る数に単位があるとエラー */
    // margin: (10 / 2px); // -> 5/px, ERROR

    /* 同じ単位の最小整数値で割ると単位なしになる魔法... */
    _/* (10px / 1px) */: (10px / 1px); // -> 10
    _/* (20%  / 1%) */: (20%  / 1%);  // -> 20
    _/* (30em / 1em) */: (30em / 1em); // -> 30

    /* nounit() を使う方がいい */
    _/* nounit(10%) */: nounit(10%);   // -> 10
    _/* nounit(20px) */: nounit(20px);  // -> 20
    _/* nounit(.5px) */: nounit(.5px);  // -> 0.5
    _/* nounit(-.9px) */: nounit(-.9px); // -> -0.5

    /* 小数点 */
    _/* nounit(0.14827179em) */: nounit(0.14827179em); // -> 0.14827

    /* 数値以外の場合は@warn */
    // _/* nounit(foo) */: nounit(foo); // -> @warn

    /* ちなみに unitless() */
    _/* unitless(10px) */: unitless(10px); // -> false
    _/* unitless(10) */: unitless(10);   // -> true
}

// * Responsive Grid System float & box-sizing (IE7 and above. Without box-sizing)
// * If set $parentWidth Responsive Mode
@mixin grid-type-float($mat, $mal, $width, $col, $firstLineCol, $parentWidth:0) {
    $mat: 20px !default;
    $mal: 20px !default;
    $width: 200px !default;
    $col: 4 !default;
    $firstLineCol: #{$col} !default;
    @include cf;
    @if $parentWidth == 0 {
        width: $mal * $col + $width * $col;
        margin-left: 0 - $mal;
    }
    @else {
        $mal: nounit($mal);
        $width: nounit($width);
        $parentWidth:nounit($parentWidth) + $mal;
        width: 100% + percentage($mal / $parentWidth);
        margin-left: 0 - percentage($mal / $parentWidth);
    }
    & > * {
        float: left;
        @if $parentWidth == 0 {
            width: $width;
            margin-left: $mal;
        } @else {
            width: percentage($width / $parentWidth);
            margin-left: percentage($mal / $parentWidth);
        }
        @for $i from 2 through $col {
            &.gridCol#{zeropadding($i,2)} {
                @if $parentWidth == 0 {
                    width: ($mal * $i - 1) + $width * $i;
                }
                @else {
                    width: percentage($mal / $parentWidth) * ($i - 1) + percentage($width / $parentWidth) * $i;
                }
            }
        }
        @if $col - ($col - $firstLineCol) == 1 {
            &:first-child ~ * {
                margin-top: $mat;
            }
        }
        @if $col - ($col - $firstLineCol) == 2 {
            &:first-child + * ~ * {
                margin-top: $mat;
            }
        }
        @if $col - ($col - $firstLineCol) == 3 {
            &:first-child + * + * ~ * {
                margin-top: $mat;
            }
        }
        @if $col - ($col - $firstLineCol) == 4 {
            &:first-child + * + * + * ~ * {
                margin-top: $mat;
            }
        }
        @if $col - ($col - $firstLineCol) == 5 {
            &:first-child + * + * + * + * ~ * {
                margin-top: $mat;
            }
        }
        @if $col - ($col - $firstLineCol) == 6 {
            &:first-child + * + * + * + * + * ~ * {
                margin-top: $mat;
            }
        }
        @if $col - ($col - $firstLineCol) == 7 {
            &:first-child + * + * + * + * + * + * ~ * {
                margin-top: $mat;
            }
        }
        @if $col - ($col - $firstLineCol) == 8 {
            &:first-child + * + * + * + * + * + * + * ~ * {
                margin-top: $mat;
            }
        }
    }
}
